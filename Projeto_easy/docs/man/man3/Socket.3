.TH "Socket" 3 "Sat Jun 3 2017" "Controle" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Socket
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Socket\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBSocket\fP (std::string ip, unsigned long port)"
.br
.ti -1c
.RI "void \fBconnectToServer\fP ()"
.br
.ti -1c
.RI "void \fBsendData\fP (char *data_, int size)"
.br
.ti -1c
.RI "\fBSocket\fP ()"
.br
.ti -1c
.RI "\fB~Socket\fP ()"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "int \fBdomain\fP = AF_INET"
.br
.ti -1c
.RI "int \fBtype\fP = SOCK_STREAM"
.br
.ti -1c
.RI "int \fBprotocol\fP = 0"
.br
.ti -1c
.RI "sockaddr_in \fBserverAddr\fP"
.br
.ti -1c
.RI "int \fBfides\fP"
.br
.ti -1c
.RI "char \fBbuffer\fP [\fBBUFFERSIZE\fP]"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class is a simple c++ wrapper on linux C sockets, it uses AF_INET as protocol and can have it's buffer size set through the BUFFERSIZE macro 
.PP
Definition at line 13 of file Socket\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Socket::Socket (std::string ip, unsigned long port)"
Initializes ip server address and port\&. Does NOT establish connection 
.PP
Definition at line 2 of file Socket\&.cpp\&.
.PP
.nf
2                                               {
3     serverAddr\&.sin_family = AF_INET;
4     serverAddr\&.sin_port = htons(port);
5     inet_aton(ip\&.c_str(), &serverAddr\&.sin_addr);
6     fides = socket(AF_INET, SOCK_STREAM, 0);
7 }
.fi
.SS "Socket::Socket ()\fC [inline]\fP"

.PP
Definition at line 25 of file Socket\&.h\&.
.PP
.nf
25 {}; 
.fi
.SS "Socket::~Socket ()"
Default constructor Closes connection 
.PP
Definition at line 20 of file Socket\&.cpp\&.
.PP
.nf
20                {
21     close(fides);
22 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void Socket::connectToServer ()"
Establishes connection to server 
.PP
Definition at line 8 of file Socket\&.cpp\&.
.PP
.nf
8                             {
9     if(connect(fides, (const sockaddr*)&serverAddr, sizeof(serverAddr)) == 0)
10         std::cout << "Connected!" << std::endl;
11     else 
12         throw std::runtime_error("Failed connecting to server");
13 }
.fi
.SS "void Socket::sendData (char * data_, int size)"
Sends arbritrary data - use the sizeof operator 
.PP
Definition at line 14 of file Socket\&.cpp\&.
.PP
.nf
14                                           {
15     memcpy(buffer, data_, size);
16     write(fides, buffer, size);
17     memset(buffer, '\0', sizeof(buffer));
18 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "char Socket::buffer[\fBBUFFERSIZE\fP]"
Data buffer, feel free to especify yours through the BUFFERSIZE macro 
.PP
Definition at line 20 of file Socket\&.h\&.
.SS "int Socket::domain = AF_INET"
\fBSocket\fP domain, please refer to the linux manuals for more info on other possible socket domains 
.PP
Definition at line 15 of file Socket\&.h\&.
.SS "int Socket::fides"
\fBSocket\fP file descriptor writes are made into 
.PP
Definition at line 19 of file Socket\&.h\&.
.SS "int Socket::protocol = 0"
Set to 0 if not using alternative protocol for the given socket type 
.PP
Definition at line 17 of file Socket\&.h\&.
.SS "sockaddr_in Socket::serverAddr"
Structure holding the target server address 
.PP
Definition at line 18 of file Socket\&.h\&.
.SS "int Socket::type = SOCK_STREAM"
\fBSocket\fP type - TCP packet stream -, please refer to the linux manuals for more info on other possible socket types 
.PP
Definition at line 16 of file Socket\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Controle from the source code\&.
