.TH "Detector" 3 "Fri Jun 2 2017" "Controle" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Detector
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Detector\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBDetector\fP ()"
.br
.ti -1c
.RI "\fBDetector\fP (std::string path)"
.br
.ti -1c
.RI "cv::Point \fBgetCenter\fP ()"
.br
.ti -1c
.RI "void \fBdetect\fP (cv::Mat &img, double scale)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "std::string \fBfilePath\fP = std::string('/usr/share/opencv/lbpcascades/lbpcascade_frontalface\&.xml')"
.br
.ti -1c
.RI "cv::CascadeClassifier \fBclassifier\fP"
.br
.ti -1c
.RI "cv::Point \fBcenter\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class takes care of detecting faces in each frame and updating its state accordingly 
.PP
Definition at line 9 of file Detector\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Detector::Detector ()"
Default constructor 
.PP
Definition at line 8 of file Detector\&.cpp\&.
.PP
.nf
8                   {
9     if(!classifier\&.load(filePath))
10         std::cout << "Erro, não pode abrir o caminho do classificador" << std::endl;
11     else   
12         std::cout << "Detector carregado" << std::endl;
13 }
.fi
.SS "Detector::Detector (std::string path)"
Initializes cacade path 
.PP
Definition at line 2 of file Detector\&.cpp\&.
.PP
.nf
2                                  : filePath(path){
3     if(!classifier\&.load(path))
4         std::cout << "Erro, não pode abrir o caminho do classificador" << std::endl;
5     else   
6         std::cout << "Detector carregado" << std::endl;
7 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void Detector::detect (cv::Mat & img, double scale)"
Processes a frame (img), scaling it (scale) 
.PP
Definition at line 17 of file Detector\&.cpp\&.
.PP
.nf
17                                              {
18     double t = 0;
19     //Img should never be empty
20     assert(!img\&.empty());
21     std::vector<cv::Rect> faces, faces2;
22     cv::Mat gray, smallImg;
23 
24     //Pre-processing img
25     cv::cvtColor( img, gray, cv::COLOR_BGR2GRAY );
26     double fx = 1 / scale;
27     cv::resize( gray, smallImg, cv::Size(), fx, fx, cv::INTER_LINEAR );
28     cv::equalizeHist( smallImg, smallImg );
29 
30     //Calculating frame-rate
31     t = (double)cv::getTickCount();
32     //Detect faces in img and store them in faces\&.
33     classifier\&.detectMultiScale( smallImg, faces,
34         1\&.1, 2, 0
35         //|CASCADE_FIND_BIGGEST_OBJECT
36         //|CASCADE_DO_ROUGH_SEARCH
37         |2,
38         cv::Size(30, 30) );
39 
40     t = (double)cv::getTickCount() - t;
41     //printf( "detection time = %g ms\n", t*1000/cv::getTickFrequency()); //Uncomment this line to print processing time each iteration
42     //If no faces are detected, just print current frame as it is\&.
43     if(faces\&.size() == 0) imshow("result", img);
44     
45     //Figuring out face's center on the screen\&. 
46     for ( size_t i = 0; i < faces\&.size(); i++ ){
47         cv::Rect r = faces[i];
48         cv::Mat smallImgROI;
49         std::vector<cv::Rect> nestedObjects;
50         int radius;
51 
52         double aspect_ratio = (double)r\&.width/r\&.height;
53         if( 0\&.75 < aspect_ratio && aspect_ratio < 1\&.3 ){
54             center\&.x = cvRound((r\&.x + r\&.width*0\&.5)*scale);
55             center\&.y = cvRound((r\&.y + r\&.height*0\&.5)*scale);
56             radius = cvRound((r\&.width + r\&.height)*0\&.25*scale);
57             cv::circle( img, center, radius, cv::Scalar(255,0,0), 3, 8, 0 );      
58         }
59         else{
60             center = cvPoint(cvRound((r\&.x + r\&.width-1)*scale), cvRound((r\&.y + r\&.height-1)*scale));
61         }
62       //  std::cout << center\&.x << " " << center\&.y << std::endl;
63 
64         imshow("result", img);
65     }
66 }
.fi
.SS "cv::Point Detector::getCenter ()"
Returns detected face's center 
.PP
Definition at line 14 of file Detector\&.cpp\&.
.PP
.nf
14                            {
15     return center;
16 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "cv::Point Detector::center"
Detected face's center 
.PP
Definition at line 13 of file Detector\&.h\&.
.SS "cv::CascadeClassifier Detector::classifier"
Cascade classifier to be used 
.PP
Definition at line 12 of file Detector\&.h\&.
.SS "std::string Detector::filePath = std::string('/usr/share/opencv/lbpcascades/lbpcascade_frontalface\&.xml')"
Cascade classifier path 
.PP
Definition at line 11 of file Detector\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Controle from the source code\&.
